name: üöÄ Build and Deploy

on:
  workflow_call:
    inputs:
      stack_name:
        required: true
        type: string
      stack_file:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - image_name: portfolio-art
            target: prod
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}

      - name: üîß Add SHORT_SHA env property with commit short sha
        run: |
          echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: üî¢ Calculate source files hash
        id: source-files-hash
        run: |
          HASH=$(find . -type f | sort | xargs md5sum | md5sum | cut -d' ' -f1)
          echo "HASH=$HASH\n" >> $GITHUB_OUTPUT

      - name: üîç Does image already exist on server ?
        uses: appleboy/ssh-action@v1.0.3
        id: check-image-exists
        continue-on-error: true
        with:
          host: ${{ secrets.MANAGER_NODE_HOST }}
          username: ${{ secrets.MANAGER_NODE_USER }}
          key: ${{ secrets.MANAGER_NODE_KEY }}
          script: |
            docker images ${{ matrix.service.image_name }} --format "{{.Repository}}:{{.Tag}}" |grep ${{steps.source-files-hash.outputs.HASH}} > /dev/null
            exit $?

      - name: üè∑Ô∏è Tag existing image
        if: steps.check-image-exists.outcome == 'success'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.MANAGER_NODE_HOST }}
          username: ${{ secrets.MANAGER_NODE_USER }}
          key: ${{ secrets.MANAGER_NODE_KEY }}
          script: |
            docker tag ${{ matrix.service.image_name }}:${{steps.source-files-hash.outputs.hash}} ${{ matrix.service.image_name }}:${{ env.SHORT_SHA }}

      - name: üõ†Ô∏è Build image
        if: steps.check-image-exists.outcome == 'failure'
        run: |
          docker build \
            --target ${{ matrix.service.target }} \
            -t ${{ matrix.service.image_name }}:${{ env.SHORT_SHA }} \
            -t ${{ matrix.service.image_name }}:${{steps.source-files-hash.outputs.hash}} \
            -f ./Dockerfile .
          docker save -o ${{ matrix.service.image_name }}.tar ${{ matrix.service.image_name }}
          chmod 664 ${{ matrix.service.image_name }}.tar

      - name: üì§ Send image to server
        if: steps.check-image-exists.outcome == 'failure'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.MANAGER_NODE_HOST }}
          username: ${{ secrets.MANAGER_NODE_USER }}
          key: ${{ secrets.MANAGER_NODE_KEY }}
          source: ${{ matrix.service.image_name }}.tar
          target: /tmp/

      - name: üì¶ Load image on server
        if: steps.check-image-exists.outcome == 'failure'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.MANAGER_NODE_HOST }}
          username: ${{ secrets.MANAGER_NODE_USER }}
          key: ${{ secrets.MANAGER_NODE_KEY }}
          script: |
              docker load -i /tmp/${{matrix.service.image_name}}.tar
              rm /tmp/${{matrix.service.image_name}}.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}

      - name: üîß Add SHORT_SHA env property with commit short sha
        run: |
          echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: üìùFormat stack file
        run : |
          sed -i 's/{{short_sha}}/${{ env.SHORT_SHA }}/g' ${{ inputs.stack_file }}
          mv ./${{ inputs.stack_file }} ${{ inputs.stack_name }}.yml

      - name: üì® Send stack file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.MANAGER_NODE_HOST }}
          username: ${{ secrets.MANAGER_NODE_USER }}
          key: ${{ secrets.MANAGER_NODE_KEY }}
          source: ./${{ inputs.stack_name }}.yml
          target: /home/${{ secrets.MANAGER_NODE_USER }}/stacks/
          overwrite: true

      - name: üöÄ Deploy stack
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.MANAGER_NODE_HOST }}
          username: ${{ secrets.MANAGER_NODE_USER }}
          key: ${{ secrets.MANAGER_NODE_KEY }}
          script: |
              docker stack deploy -c /home/${{ secrets.MANAGER_NODE_USER }}/stacks/${{ inputs.stack_name }}.yml ${{ inputs.stack_name }}
